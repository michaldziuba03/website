---
import Layout from "../layouts/Layout.astro";
import { Navigation } from "../components/Navigation";
import { PostCard } from "../components/PostCard";
import Pagination from "../components/Pagination.astro";
import { ScrollToTop } from "../components/ScrollToTop";
import { Button } from "../components/Button";
import { Image } from "astro:assets";
import { Footer } from "../components/Footer";
import { LuArrowRight } from 'react-icons/lu';
import { Container } from "../components/Container";
import type { Page } from "astro";
import { getCategories } from "../content";
import { urlForImage } from "../sanity/lib/utils";
import { SegmentedNavigation, SegmentedNavigationItem } from "../components/SegmentedNavigation";
import { SectionHeading } from "./SectionHeading";
import readingTime from "reading-time";
import { toPlainText } from "astro-portabletext";

interface Props {
  posts: any[];
  page: Page;
  category?: string;
}

const { page, posts, category } = Astro.props;
const categories = await getCategories();

const first = posts[0];
const firstLink = first ? `/blog/${first.slug.current}` : '';

---
<Layout>
  <div class="flex flex-col w-full items-center">
    <Navigation />
    <Container className="flex flex-col w-full pt-16">
      <h1 class="font-black text-3xl sm:text-4xl">Blog</h1>
      <p class="text-slate-700 mt-5 sm:text-lg">
        Explore my latest posts, guides, and personal stories.
      </p>
      <SegmentedNavigation>
        <SegmentedNavigationItem href="/blog" isActive={!category}>All</SegmentedNavigationItem>
        {
          categories.map((c) => (
            <SegmentedNavigationItem
              href={`/blog/${c.slug.current}`}
              isActive={category === c.slug.current}
            >
              {c.title}
            </SegmentedNavigationItem>
          ))
        }
      </SegmentedNavigation>
    </Container>

    <Container className="mt-8">
      <div class="flex gap-8 items-center justify-between w-full p-16 bg-white rounded-3xl">
        <div class="py-8 md:max-w-72 lg:max-w-[600px]">
          <span
            class="my-1 block font-black leading-none uppercase text-primary"
            >FEATURED</span
          >
          <a
            href={firstLink}
            class="hover:text-primary transition-colors text-2xl lg:text-3xl mt-4 line-clamp-3 font-black leading-denser md:line-clamp-none"
          >
            {first.title}
          </a>
          <p class="my-3 line-clamp-3 text-lg text-gray-600">
            {first.description}
          </p>

          <Button
            href={firstLink}
            size="md"
            className="mt-10"
            variant="outline">Read more <LuArrowRight className="w-5 h-5" /></Button
          >
        </div>

        <a class="hidden md:inline h-full" href={firstLink}>
          {
            first.mainImage.asset && (
              <Image
                loading="eager"
                alt="featured"
                class="mb-2 border border-gray-300 rounded-xl"
                width="720"
                height="360"
                src={urlForImage(first.mainImage.asset).size(720, 360).url()}
              />
            )
          }
        </a>
      </div>
    </Container>

    <section class="py-24 md:py-lg md:pt-sm flex flex-col overflow-x-hidden">
      <Container>
        <SectionHeading>Latest posts</SectionHeading>
        <div class="py-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-9">
          {
            posts.length === 0 && (
              <p class="text-gray-500 col-span-full">No posts found.</p>
            )
          }
          {
            posts.map((post) => (
              <PostCard
                title={post.title}
                description={post.description}
                slug={post.slug.current}
                image={urlForImage(post.mainImage.asset).size(600, 300).url()}
                author={{
                  name: post.author.name,
                  avatar: urlForImage(post.author.image.asset).size(32, 32).url(),
                }}
                pubDate={new Date(post.publishedAt)}
                category={post.category}
                readingTime={readingTime(toPlainText(post.body)).text}
              />
            ))
          }
        </div>

        <Pagination page={page} />
      </Container>
    </section>

		<Footer />
  </div>
  <ScrollToTop client:only />
</Layout>
