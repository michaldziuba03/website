---
import type { SanityDocument } from "@sanity/client";
import { loadQuery } from "../../sanity/lib/load-query";
import PortableText from "../../components/PortableText.astro";
import getReadingTime from 'reading-time';
import { toPlainText } from 'astro-portabletext';
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import { getFormattedDate } from "../../utils";
import { urlForImage } from "../../sanity/lib/utils";
import { Navigation } from "../../components/Navigation";
import { Footer } from "../../components/Footer";
import { Share } from "../../components/Share";
import { ScrollToTop } from "../../components/ScrollToTop";
import { Container } from "../../components/Container";
import Head from "../../components/Head.astro";

export async function getStaticPaths() {
  const { data: posts } = await loadQuery<SanityDocument[]>({
    query: `*[_type == "post"]`,
  });

  return posts.map(({ slug }) => {
    return {
      params: {
        slug: slug.current,
      },
    };
  });
}

const { params } = Astro;

const { data } = await loadQuery({
  query: `*[_type == "post" && slug.current == $slug][0] {
			title,
			description,
			slug,
      body,
			mainImage,
      publishedAt,
			_updatedAt,
			_createdAt,
			author->{
				name,
				image
			},
      category ->{
        title,
        slug
      }
		}`,
  params,
});

const post = data as any;
const mainImage = post.mainImage.asset ? urlForImage(post.mainImage.asset).url() : undefined;
const  readingTime = getReadingTime(toPlainText(post.body));
---
<head>
  <Head title={post.title} description={post.description} image={mainImage} />
</head>
<Layout>
  <div class="mx-auto container w-full max-screen">
    <Navigation />

    <Container className="my-16">
      <article class="mx-auto max-w-2xl text-lg">
      <div class="not-prose md:text-base">
        <span class="text-primary text-lg font-bold uppercase">{post.category.title}</span>
        <h1
          class="font-black text-3xl lg:text-5xl mt-1 whitespace-normal leading-tight"
        >
          {post.title}
        </h1>
      </div>
      <div class="mt-4">
        <p>{post.description}</p>
      </div>

      <div class="flex justify-between items-center md:text-base">
        <div class="flex gap-3 items-center">
          <Image
            loading="eager"
            alt="avatar"
            width="64"
            height="64"
            src={urlForImage(post.author.image).size(32, 32).url()}
            class="w-11 h-11 bg-slate-800 rounded-full"
          />
          <div class="flex flex-col my-6">
            <span class="font-semibold">Michał Dziuba</span>
            <span class="text-sm font-semibold text-slate-600">{getFormattedDate(new Date(post.publishedAt))} · {readingTime.text}</span>
          </div>
        </div>
        <Share client:load />
      </div>
      <div>
        {
          post.mainImage.asset && (
            <Image
              class="w-full border border-gray-300 rounded-lg"
              loading="eager"
              width={1020}
              height={510}
              src={mainImage!}
              alt=""
            />
          )
        }
      </div>
      <div class="my-8">
        <PortableText portableText={post.body} />
      </div>
    </article>
    </Container>

    <Footer />
  </div>
  <ScrollToTop client:load />
</Layout>
